[ { "title": "XCode11 公证pkg", "url": "/posts/make-pkg-notarized/", "categories": "Summarise", "tags": "Notarize, 公证, XCode11", "date": "2020-05-21 00:00:00 +0000", "snippet": "XCode11 内不再包含Application Loader.app, 相关的指令和功能转移到xcrun altool命令下。所以操作上与XCode10有些区别，本文将一步步介绍整个公证过程的要求和步骤。##公证通过的必要条件以公司MacOSX安装包为例，公证成功的前提如下： 所有binary archive，如app， dylib， framework，kext，以及打包的pkg都需要用developer ID类型证书签名，以其他类型证书签名公证会给出错误原因The binary is not signed with a valid Developer ID certificate..." }, { "title": "静态库符号冲突", "url": "/posts/static-library-symbol-confict/", "categories": "Summarise", "tags": "静态库, 符号冲突", "date": "2020-01-21 00:00:00 +0000", "snippet": "iOS目前很大一部分三方库依然是以静态库为发布方式的，在公司内部尤其如此。以本公司为例，算法和通信库都是静态库，对外提供的SDK也往往是静态库。正好最近有同事问怎么解决符号冲突的问题，于是搜集两种场景和解决方案。###集成方 对于三方的静态库，最后链接的时候出现符号冲突，发现某两个静态库发生冲突该怎么办？这种情况下，一般需要将其中一个静态库中的相同依赖移除，解压静态库并移除相关的.o文件。但这是不保险的，因为前提冲突的函数或者方法定义是相同的或者可替换的。不同的情况下只会造成莫名其妙的崩溃问题。正确的办法是要求SDK供应商修改冲突问题，或者更换不冲突的SDK。###提供方 为客户提供..." }, { "title": "C++11可变参数函数模板展开原理", "url": "/posts/cplusplus-template/", "categories": "Summarise", "tags": "C++11, 可变参数函数模板", "date": "2019-10-17 00:00:00 +0000", "snippet": "C++11新特性中的可变参数模板，相对于原来的va_list展开方式，提供了递归和初始化列表展开两种方式，我们分别看下其中的原理。递归方式展开递归方式展开是比较容易理解的，只需要提供一个展开函数模板和终止函数，例如：void expand() // 也可以是带固定个数参数的模板，以提前终止递归{ std::cout &amp;lt;&amp;lt; &quot;finished&quot; &amp;lt;&amp;lt; std::endl;}template &amp;lt;typename T, typename ...Args&amp;gt;void expand(T arg,..." }, { "title": "Travis实战", "url": "/posts/travis-in-practise/", "categories": "Summarise", "tags": "Travis, CI, Github", "date": "2019-09-18 00:00:00 +0000", "snippet": "" }, { "title": "一步一步完成BTC交易", "url": "/posts/sign-tx-of-btc/", "categories": "Summarise", "tags": "比特币, UTXO, P2SH, P2PKH", "date": "2019-09-18 00:00:00 +0000", "snippet": "" }, { "title": "再谈成为产品的CEO", "url": "/posts/ceo-of-product-revisited/", "categories": "Essay", "tags": "Product Manager", "date": "2019-09-18 00:00:00 +0000", "snippet": " 翻译自Marty Cagan的文章CEO of the Product Revisited将产品经理比喻成产品的CEO这个概念一直是产品里很有争议和两极化的话题之一。很多人要么强烈反对要么强烈支持，我也一直很矛盾。我从Ben Horowitz那首次接触到这个概念，当时我们在Netscape一起工作，值得注意的是我们曾经在Jim Barksdale手下干活，他是一位在个性和领导力上都很强的CEO，这也许是为什么我起初没有跟其他一些人一样对这个概念持有保留意见。但我同样不反对对这个比喻的主要的批评，它授予产品经理自以为可以扮演老板的角色的权利，因为我也认识一些产品经理误解了这个概念，成了..." }, { "title": "PKCS标准入门", "url": "/posts/introduce-to-pkcs/", "categories": "Summarise", "tags": "PKCS", "date": "2019-07-24 00:00:00 +0000", "snippet": "" }, { "title": "C++11 features", "url": "/posts/cplusplus-learning/", "categories": "Summarise", "tags": "C++11, EOS", "date": "2019-07-15 00:00:00 +0000", "snippet": " std::function &amp;amp; std::bind What does std::move &amp;amp; std::forward do? To be answered; The differences of emplace_back &amp;amp; push_back. 二者的区别在于他们的参数类型不同 :)。 emplace_back 的参数列表为Args&amp;amp;&amp;amp;... __args, 传入的参数列表将直接通过std::forward 转发给相应的构造函数进行对象的构造.所..." }, { "title": "NFC浅入浅出", "url": "/posts/introduce-to-nfc/", "categories": "Summarise", "tags": "iOS13, NFC, RFID", "date": "2019-06-27 00:00:00 +0000", "snippet": "WWDC2019可以说是苹果远远被低估的一届开发者大会，本次大会放出的框架和各种改变会在几年后产生巨大的影响。但这篇博文只是想介绍下iOS13在对CoreNFC框架所做的更新以及相关的NFC背景。背景NFC可以说是从RFID演化而来的一项近场通信技术，二者的关系类似深圳和广东，NFC脱胎于RFID，却有自己的技术特点和应用场景。RFID(Radio Frequency IDentification)是一种通过无线电信号识别特定目标的技术，并可读写数据，包含低频到微波频段，所以传输距离也从毫米(mm)级到米(m)级不等。RFID 一般分为标签和读取器两部分，相对于NFC来说，二者的关系不可..." }, { "title": "回望2018", "url": "/posts/look-back-on-2018/", "categories": "Summarise", "tags": "2018年, 经济, 个人", "date": "2019-03-04 00:00:00 +0000", "snippet": "2018年已经过去快一个月了，这一年对于很多人可能只是寻常的一年，但对于我来说，却是不同寻常。太多的重要的事情发生在这一年，太多的收获也在这一年。18年初我选择考PMP证书，本来只是说想拓展下能力，让自己具备一个项目经理的知识基础，但收获超过原本预计。5A通过PMP考试这个在意料之中，但是公司后来间接提薪确实没有料到。当然，PMP证书并不是提薪的原因，而是工作上的某项目的成功和领导看到我表现出的上进心催化出的。不管怎样，去年是我毕业来薪资涨幅最大的一年，必须MARK。从前年开始，关心经济和股市，成为广大韭菜中的一员。去年狠狠的跟着大盘走了一波下坡路，亏了一年年终奖。这次挫折倒是没打击到我..." }, { "title": "RxSwift入门", "url": "/posts/beginers-guide-to-rxswift/", "categories": "Summarise", "tags": "ReactiveX, RxSwift, 函数式编程", "date": "2018-05-20 00:00:00 +0000", "snippet": "背景响应式编程改变了开发者看待世界的方式，之前无论是面向过程还是面向对象编程，采用的都是拉式获取响应，也就是说如果想获得一个函数响应，你得去调用这个函数来获得其结果，无论是同步还是异步。但响应式编程改变了这一过程，订阅发布是一种推式响应，只需要订阅一个响应，那么响应发生的时候会自动交回到订阅者的手上。这很自然的导致了获取相应是一个异步过程，因为订阅后订阅者不需要等待结果的发生。响应式编程虽然是对观察者模式的扩大化应用，但衍生出来一个新的开发模式是一开始没想到的，从ReactiveCocoa到ReactiveX，再到Kotlin和SwiftUI只有短短几年时间，这一开发模式的发展速度超乎所..." }, { "title": "iOS逆向", "url": "/posts/ios-jailbreak-shellcrack-resignature/", "categories": "Summarise", "tags": "越狱, 砸壳, 重签名", "date": "2017-09-10 00:00:00 +0000", "snippet": "这周因公司项目，需要对Appstore上的某App进行重签名，于是做了一番探索。越狱首先必备越狱后的iPhone一台，找到一台公司的iPhone5S测试机，系统版本10.1.1，不新不旧，正好用来越狱。在网上找了一些越狱工具，经过多次实践，windows系统版本7.0爱思助手一次性越狱成功。其中需要配合在手机上运行yulu102，并等待设备重启，重启后iPhone如果出现cydia 应用并能启动，说明越狱成功。注意目前iPhone在重启后需要重新越狱。脱壳Appstore上的应用除了有开发者证书签名，还被苹果公司加过一次密，所以是直接重签名虽然能安装但是是无法运行的。所以第二步就是脱壳。..." }, { "title": "递归与递推", "url": "/posts/recursion/", "categories": "Essay", "tags": "面试, 递归, 尾递归, 递推", "date": "2016-12-12 00:00:00 +0000", "snippet": "这些天把腾讯的一道笔试题拿回公司用来面试，出乎意料的难倒了一批人，题目本身很简单，但能够被腾讯拿来当笔试题，其实也是可以挖一挖，可以用来评估面试者算法基础。题目如下： 一楼梯共有n级台阶，规定每步可以迈1级台阶或2级台阶或3级台阶，计算地面到第n级台阶所有不同的走法的总数。大多数人可以很快写下面的代码：int count_way(int n) { if (n = 1 || n = 2) { return n; } return count_way(n-1) + count_way(n-2);}这么解是可以的，但是面试官往往会问递归的空间复杂度能否优化，或者直接提出空间复杂度要求O(1..." }, { "title": "关于非对称加密算法", "url": "/posts/about-asymmetric-key/", "categories": "Summarise", "tags": "算法, 非对称加密, RSA算法, 椭圆曲线加密算法", "date": "2015-04-17 00:00:00 +0000", "snippet": " 现在所在的公司是一家商密公司，主要涉及的应用算法就是非对称加密算法RSA和ECC。一直想能够在这方面总结一下，算是对这段时间的学习打上一个Tag。现代密码学应用如此突飞猛进，区块链，数字货币的爆发追究源头都要感谢非对称加密算法的提出。目前广泛应用的非对称加密算法有两种：RSA和ECC，这两种算法分别代表了两类加密算法：基于大整数因子分解 和 基于椭圆曲线的离散对数计算。相对于RSA来说，达到相同安全等级时，ECC所需的密钥长度远低于RSA，并且ECC的秘钥对生成和计算速度也更快，更不用说ECC的存储只需要保存私钥即可，公钥可以计算得出，所以现在区块链中使用的非对称算法都是ECC算法，..." } ]
